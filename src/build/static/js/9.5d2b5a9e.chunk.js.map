{"version":3,"file":"static/js/9.5d2b5a9e.chunk.js","mappings":"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","sources":["genericComponents/modalPopup/AcademicScore.tsx"],"sourcesContent":["import { Box, Button, Typography, TextField, MenuItem, InputAdornment, IconButton, Popover, Grid, InputLabel, CircularProgress } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { testReadyStyles } from \"src/components/styles/customStyles\";\nimport Images from \"src/assets\";\nimport { ErrorMessage } from \"formik\";\nimport { Close } from \"@mui/icons-material\";\nimport { gradeScaleOptions } from \"src/assets/constants/misc\";\n\nconst AcademicScore = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Get data passed via navigation state\n  const { selectedStatus, title: pageTitle } = location.state || {};\n\n  // Debugging: Check if the title is being received correctly\n  //console.log(\"Received Title:\", pageTitle);\n\n  // Set the title dynamically based on what was received\n  const [title, setTitle] = useState(pageTitle || \"Enter your academic details\");\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [institutions, setInstitutions] = useState<{ InstitutionName: string }[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false); \n  const [showDropdown,setShowDropdown]=useState(false);\n  const [search,setSearch]=useState(\"\");\n\n  useEffect(() => {\n    if (pageTitle) {\n      setTitle(pageTitle);\n    }\n  }, [pageTitle]); \n\n  const [formData, setFormData] = useState({\n    institution: \"\",\n    academicLevel: \"\",\n    gradeSystem: \"\",\n    score: \"\",\n    backlogs: \"\",\n    maxScore: null as number | null \n  });\n\n  const [errors, setErrors] = useState({\n    institution: \"\",\n    academicLevel: \"\",\n    gradeSystem: \"\",\n    score: \"\",\n    backlogs: \"\"\n  });\n\n\n  useEffect(() => {\n    if (formData.institution.length < 2) {\n      setInstitutions([]);\n      setHasSearched(false);\n      setSearch(formData.institution);\n      return;\n    }\n  }, [formData.institution]);\n  \n\n\n  const localStorageHandler=(academicLevel:string )=>{\n    console.log(\"Selected Level\",academicLevel);\n\n    if (formData.gradeSystem === \"cgpa1\") formData.maxScore = 10;\n  if (formData.gradeSystem === \"cgpa2\") formData.maxScore = 7;\n  if (formData.gradeSystem === \"cgpa3\") formData.maxScore = 5;\n  if (formData.gradeSystem === \"gpa\") formData.maxScore = 4;\n\n    if(academicLevel===\"masters\")\n  {\n    setPostgraduation({institution:formData.institution,backlogs:formData.backlogs,gradingSystem:formData.gradeSystem,totalScore:formData.score});\n  }\n  if(academicLevel===\"grade 12\")\n  {\n    setIntermediate({institution:formData.institution,backlogs:formData.backlogs,gradingSystem:formData.gradeSystem,totalScore:formData.score});\n  }\n  if(academicLevel===\"bachelors\")\n  {\n    setUndergraduation({institution:formData.institution,backlogs:formData.backlogs,gradingSystem:formData.gradeSystem,totalScore:formData.score, maxScore: formData.gradeSystem === \"cgpa1\" ? 10 : formData.gradeSystem === \"cgpa2\" ? 7 : formData.gradeSystem==='cgpa3'? 5:formData.gradeSystem==='gpa'?4:undefined});\n  }\n  if(academicLevel===\"others\")\n  {\n    setOthers({institution:formData.institution,backlogs:formData.backlogs,gradingSystem:formData.gradeSystem,totalScore:formData.score});\n  }\n  }\n\n  const setPostgraduation=(collectedData:{institution: string,backlogs:string,gradingSystem:string,totalScore:number|string})=>{\n    console.log(\"Masters Data\",collectedData);\n    let currentValue=localStorage.getItem(\"user-profile\");\n    let currentValueObj=currentValue?JSON.parse(currentValue):{}\n    if(currentValueObj)\n    {\n      localStorage.setItem(\"user-profile\",JSON.stringify({...currentValueObj,education:{ postGraduation:{institution:collectedData.institution,\n        backlogs:collectedData.backlogs,totalScore:collectedData.totalScore,gradingSystem:collectedData.gradingSystem\n      }}}));\t\n    }\n  }\n\n  const setUndergraduation=(collectedData:{institution: string,backlogs:string,gradingSystem:string,totalScore:number|string,  maxScore?: number;})=>{\n    let currentValue=localStorage.getItem(\"user-profile\");\n    let currentValueObj=currentValue?JSON.parse(currentValue):{};\n    if(currentValueObj)\n    {\n      localStorage.setItem(\"user-profile\",JSON.stringify({...currentValueObj,education:{ underGraduation:{institution:collectedData.institution,\n        backlogs:collectedData.backlogs,totalScore:collectedData.totalScore,gradingSystem:collectedData.gradingSystem,...(collectedData.maxScore && { maxScore: collectedData.maxScore }), \n      }}}));\t\n    }\n  }\n  const setIntermediate=(collectedData:{institution: string,backlogs:string,gradingSystem:string,totalScore:number|string})=>{\n    let currentValue=localStorage.getItem(\"user-profile\");\n    let currentValueObj=currentValue?JSON.parse(currentValue):{};\n    if(currentValueObj)\n    {\n      localStorage.setItem(\"user-profile\",JSON.stringify({...currentValueObj,education:{ plus2:{institution:collectedData.institution,\n        backlogs:collectedData.backlogs,totalScore:collectedData.totalScore,gradingSystem:collectedData.gradingSystem\n      }}}));\t\n    }\n  }\n  const setOthers=(collectedData:{institution: string,backlogs:string,gradingSystem:string,totalScore:number|string})=>{\n    let currentValue=localStorage.getItem(\"user-profile\");\n    let currentValueObj=currentValue?JSON.parse(currentValue):{};\n    if(currentValueObj)\n    {\n      localStorage.setItem(\"user-profile\",JSON.stringify({...currentValueObj,education:{ plus2:{institution:collectedData.institution,\n        backlogs:collectedData.backlogs,totalScore:collectedData.totalScore,gradingSystem:collectedData.gradingSystem\n      }}}));\t\n    }\n  }\n  \n \n  \n  // Handle input changes\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n      ...(name === \"gradeSystem\"\n        ? {\n            maxScore: value === \"cgpa1\" ? 10 : value === \"cgpa2\" ? 7 : value==='cgpa3'?5:value==='gpa'?4:null // Set maxScore based on gradeSystem\n          }\n        : {})\n    }));\n\n    // Validate fields dynamically\n    validateField(name, value);\n  };\n\n\n\n  // Validation logic\n  const validateField = (name: string, value: string) => {\n    let error = \"\";\n\n    switch (name) {\n      case \"institution\":\n        error = value.trim() === \"\" ? \"Institution name is required\" : \"\";\n        break;\n      case \"academicLevel\":\n        error = value === \"\" ? \"Please select an academic level\" : \"\";\n        break;\n      case \"gradeSystem\":\n        error = value === \"\" ? \"Please select a grade system\" : \"\";\n        break;\n      case \"score\":\n        if (!formData.gradeSystem) {\n          error = \"Select a grade system first\";\n        } else if (formData.gradeSystem === \"percentage\") {\n          // Allow numbers with up to 2 decimal places, between 0-100\n          const percentageRegex = /^(100(\\.00?)?|([0-9]?[0-9])(\\.\\d{1,2})?)$/;\n          if (!percentageRegex.test(value)) {\n            error = \"Enter a valid percentage (0-100) with up to 2 decimals\";\n          }\n        }\n        else if(formData.gradeSystem === \"cgpa1\"){\n          const cgpa1Regex = /^10(\\.00?)?$|^([0-9](\\.\\d{1,2})?)$/;\n          if (!cgpa1Regex.test(value)) {\n            error = \"Enter a valid CGPA (0-10) with up to 2 decimals\";\n          }\n        }\n          else if (formData.gradeSystem === \"cgpa2\") {\n            // Validation for CGPA out of 7 (0-7, up to 2 decimals)\n            const cgpa2Regex = /^7(\\.00?)?$|^([0-6](\\.\\d{1,2})?)$/;\n            if (!cgpa2Regex.test(value)) {\n              error = \"Enter a valid CGPA (0-7) with up to 2 decimals\";\n            }\n        }else if (formData.gradeSystem === \"cgpa3\") {\n          // Validation for CGPA out of 7 (0-7, up to 2 decimals)\n          const cgpa3Regex = /^7(\\.00?)?$|^([0-5](\\.\\d{1,2})?)$/;\n          if (!cgpa3Regex.test(value)) {\n            error = \"Enter a valid CGPA (0-7) with up to 2 decimals\";\n          }\n      }\n          else if (formData.gradeSystem === \"gpa\") {\n      // Validation for CGPA out of 7 (0-7, up to 2 decimals)\n       const gpa = /^7(\\.00?)?$|^([0-4](\\.\\d{1,2})?)$/;\n      if (!gpa.test(value)) {\n        error = \"Enter a valid GPA (0-4) with up to 2 decimals\";\n       }\n  }\n  else if (formData.gradeSystem === \"grade\") {\n    // Validation for letter grades (A-Z, a-z)\n    const gradeRegex = /^[A-Za-z]$/;\n    if (!gradeRegex.test(value)) {\n      error = \"Enter a valid grade (A-Z)\";\n    }\n  }\n        \n        else if (value === \"\" || parseFloat(value) <= 0) {\n          error = \"Enter a valid score\";\n        }\n        break;\n      case \"backlogs\":\n        error = value !== \"\" && parseInt(value) < 0 ? \"Backlogs cannot be negative\" : \"\";\n        break;\n      default:\n        break;\n    }\n\n    setErrors((prevErrors) => ({ ...prevErrors, [name]: error }));\n  };\n\n  // Check if all fields are valid before enabling Save button\n  const isFormValid = Object.values(errors).every((err) => err === \"\") &&\n                      Object.values(formData).every((val) => val !== \"\");\n\n  \n\n  const handleSave = () => {\n    localStorage.setItem(\"formData\", JSON.stringify(formData));\n    navigate(\"/testcondition1\");\n    localStorageHandler(formData.academicLevel)\n  };\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    const savedData = localStorage.getItem(\"formData\");\n    if (savedData) {\n      setFormData(JSON.parse(savedData)); // Set the state with the saved data\n    }\n  }, []); \n\n  const handleOptionClick = (option: { InstitutionName: string }) => {\n    setFormData((prev) => ({ ...prev, institution: option.InstitutionName }));\n    setInstitutions([]); // Hide suggestions after selection\n    setShowDropdown(false)\n    //setSelected(option.InstitutionName);\n  };\n\n  const handleInstitueSearch=(e: React.ChangeEvent<HTMLInputElement>)=>{\n    console.log(\"Change\")\n    const fetchData = async (search:string) => {\n      setLoading(true);\n      try {\n        const response = await fetch(\n          `https://campusroot.com/api/v1/public/university/?search=${search}&institutions=1&universities=0&disciplines=0&subDisciplines=0&location=0&perPage=100&page=1&custom=true`\n        );\n        const data = await response.json();\n        setInstitutions(data?.data?.institutions\n          || []);\n        setHasSearched(true);\n        setShowDropdown(true);\n      } catch (error) {\n        console.error(\"Error fetching institutions:\", error);\n      }\n      setLoading(false);\n    };\n    fetchData(e.target.value);\n    handleChange(e)\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"info-popover\" : undefined;\n\n  console.log(\"Data\",showDropdown);\n\n  return (\n    <Box\n      sx={{\n        ...testReadyStyles.container1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n        textAlign: \"center\",\n      }}\n    >\n      <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mb: 3, fontSize: { xs: \"1.5rem\", lg: \"2rem\" } }}>\n        {title.includes(\"final score\") ? (\n        <>\n          What is your <span style={{ color: \"#F87171\" }}>final score</span> status?\n        </>\n      ) : (\n        <>\n          Enter your <span style={{ color: \"#F87171\" }}>current academic</span> details\n        </>\n      )}\n      </Typography>\n\n      {/* Input Fields */}\n      <Box sx={{ width: { xs: \"90%\", sm: \"400px\" }, display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n        <div style={{position:\"relative\"}}>\n          <TextField\n          fullWidth\n          name=\"institution\"\n          label=\"Enter your school, college, or university name\"\n          variant=\"outlined\"\n          value={formData.institution}\n          onChange={handleInstitueSearch}\n          error={!!errors.institution}\n          helperText={errors.institution}\n          autoComplete=\"off\"\n          InputProps={{\n            endAdornment: (\n              <>\n                {loading && <CircularProgress color=\"inherit\" size={20} />}\n                {formData.institution && (\n                  <Close\n                    sx={{ cursor: \"pointer\" }}\n                    onClick={() => setFormData((prev) => ({ ...prev, institution: \"\" }))}\n                  />\n                )}\n              </>\n            ),\n          }}\n          sx={{\n            position:\"relative\",\n            \"& .MuiOutlinedInput-root\": {\n              borderRadius: \"12px\",\n              \"& fieldset\": { borderLeft: \"10px solid #D1D3F9\" },\n            },\n          }}\n        />\n        {showDropdown && (\n          <Box\n            sx={{\n              position: \"absolute\",\n              top:'100%',\n              zIndex: 100,\n              backgroundColor: \"#fff\",\n              boxShadow: 1,\n              maxHeight: \"200px\",\n              overflowY: \"auto\",\n              width: \"100%\",\n            }}\n          >\n            {institutions.map((option, index) => (\n              <MenuItem  key={index}\n              onClick={() => handleOptionClick(option)}>\n                {option?.InstitutionName\n                }\n              </MenuItem>\n            \n              \n            ))}\n            {/* {!loading && hasSearched && institutions.length === 0 && (\n              <MenuItem onClick={() => handleOptionClick(\"Other\")} sx={{ color: \"#1cbeb5\" }}>\n                Can't find institution\n              </MenuItem>\n            )} */}\n          </Box>\n        )}\n        </div>\n        <TextField\n          fullWidth\n          select\n          name=\"academicLevel\"\n          label={title.includes(\"final score\")?\"Select your last academic\":'select your current academic'}\n          variant=\"outlined\"\n          value={formData.academicLevel}\n          onChange={handleChange}\n          error={!!errors.academicLevel}\n          helperText={errors.academicLevel}\n          sx={{\n            \"& .MuiOutlinedInput-root\": {\n              borderRadius: \"12px\",\n              \"& fieldset\": { borderLeft: \"10px solid #FAEAD0\" },\n            },\n          }}\n        >\n          <MenuItem value=\"masters\">Masters</MenuItem>\n          <MenuItem value=\"bachelors\">Bachelors</MenuItem>\n          <MenuItem value=\"diploma\">Diploma</MenuItem>\n          <MenuItem value=\"grade 12\">Grade 12</MenuItem>\n          <MenuItem value=\"others\">Others</MenuItem>\n        </TextField>\n\n        <TextField\n          fullWidth\n          select\n          name=\"gradeSystem\"\n          label=\"Grade system\"\n          variant=\"outlined\"\n          value={formData.gradeSystem}\n          onChange={handleChange}\n          error={!!errors.gradeSystem}\n          helperText={errors.gradeSystem}\n          sx={{\n            \"& .MuiOutlinedInput-root\": {\n              borderRadius: \"12px\",\n              \"& fieldset\": { borderLeft: \"10px solid #D1D3F9\" },\n            },\n          }}\n        >\n          {\n            gradeScaleOptions.map((item)=>\n              <MenuItem value={item.value}>{item.label}</MenuItem>\n            )\n          }\n        </TextField>\n\n        <TextField\n          fullWidth\n          name=\"score\"\n          label=\"Enter Score\"\n          variant=\"outlined\"\n          value={formData.score}\n          onChange={handleChange}\n          error={!!errors.score}\n          helperText={errors.score}\n          type={formData.gradeSystem === \"grade\" ? \"text\" : \"number\"} // Change input type dynamically\n             inputProps={{\n                        ...(formData.gradeSystem === \"grade\"\n                    ? { maxLength: 1, pattern: \"[A-Za-z]\" } // Allow only one letter for grades\n                    : { step: \"0.01\" }) // Allow decimal numbers for other systems\n                       }}\n          sx={{\n            \"& .MuiOutlinedInput-root\": {\n              borderRadius: \"12px\",\n              \"& fieldset\": { borderLeft: \"10px solid #75ECE5\" },\n            },\n          }}\n        />\n\n<Popover\n\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <Box sx={{ p: 2, maxWidth: 300 }}>\n          <Typography variant=\"body1\" fontWeight=\"bold\">\n          What are Backlogs?\n          </Typography>\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n          A backlog refers to a subject that was not cleared in the first attempt and needs to be reattempted.\n          </Typography>\n        </Box>\n      </Popover>\n\n\n        <TextField\n          fullWidth\n          name=\"backlogs\"\n          label=\"Enter backlogs\"\n          variant=\"outlined\"\n          value={formData.backlogs}\n          onChange={handleChange}\n          error={!!errors.backlogs}\n          helperText={errors.backlogs}\n          type=\"number\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={handleClick}>\n                  <img  src={Images.info} alt=\"Click Me\" width={26} height={28} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          sx={{\n            \"& .MuiOutlinedInput-root\": {\n              borderRadius: \"12px\",\n              \"& fieldset\": { borderLeft: \"10px solid #FFA89C\" },\n            },\n          }}\n        />\n      </Box>\n\n      {/* Navigation Buttons */}\n      <Box sx={{mt: 16,\n         display: \"flex\",\n         justifyContent: \"center\", // Centers horizontally\n         alignItems: \"center\", // Centers vertically\n         height: \"10vh\", // Reduced from 100vh to 90vh to move up\n         width: \"100%\", }}>\n        <Button variant=\"text\" sx={{ color: \"#888\" }} onClick={() => navigate(-1)}>\n          ← Back\n        </Button>\n        <Button variant=\"contained\" sx={{ px: 4, py: 1.5, borderRadius: \"20px\" }} onClick={handleSave} disabled={!isFormValid}>\n          Save\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AcademicScore;\n\n\n{/* <Grid item xs={12} sm={6}>\n  <InputLabel id=\"instituteName\" sx={{ fontWeight: \"500\", color: \"#000\", mb: 1 }}>\n    Name of Institution\n  </InputLabel>\n  <Box sx={{ width: \"100%\", position: \"relative\" }}>\n    <TextField\n      value={formData.institution}\n      onChange={handleChange}\n      placeholder=\"Search for an institution\"\n      variant=\"outlined\"\n      name=\"underGraduation.instituteName\"\n      size=\"small\"\n      autoComplete=\"off\"\n      fullWidth\n      InputProps={{\n        endAdornment: (\n          <>\n            {loading && <CircularProgress color=\"inherit\" size={20} />}\n            {formData.institution && (\n              <Close\n                sx={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  //setInstitutionName(\"\");\n                  //setInstitutions([]);\n                  //setSearchTerm(\"\");\n                  //setHasSearched(false);\n                }}\n              />\n            )}\n          </>\n        ),\n      }}\n    />\n    {loading || institutions.length > 0 || (hasSearched && institutions.length === 0) ? (\n      <Box\n        sx={{\n          position: \"absolute\",\n          zIndex: 1,\n          backgroundColor: \"#fff\",\n          boxShadow: 1,\n          maxHeight: \"200px\",\n          overflowY: \"auto\",\n          width: \"100%\",\n        }}\n      >\n        {institutions.map((option: any, index) => (\n          <MenuItem\n            key={index}\n            sx={{\n              fontSize: \"14px !important\",\n              display: \"flex\",\n              alignItems: \"center\",\n              whiteSpace: \"normal\",\n            }}\n            onClick={() => handleOptionClick(option)}\n          >\n            {option?.InstitutionName}\n            {option?.IEH?.exists && <Star sx={{ fontSize: \"1.1rem\", color: \"orange\" }} />}\n            {option?.District && `, ${option?.District}`}\n          </MenuItem>\n        ))}\n        {!loading && hasSearched && (\n          <MenuItem\n            sx={{\n              fontSize: \"14px !important\",\n              display: \"flex\",\n              whiteSpace: \"normal\",\n              color: \"#1cbeb5  !important\"\n            }}\n            onClick={() => handleOptionClick(\"Other\")}\n\n          >\n            Can't find institution\n          </MenuItem>\n        )}\n      </Box>\n    ) : null}\n  </Box>\n  <ErrorMessage\n    name=\"underGraduation.instituteName\"\n    component=\"div\"\n    className=\"error\"\n  />\n</Grid> */}"],"names":["AcademicScore","navigate","useNavigate","location","useLocation","selectedStatus","title","pageTitle","state","setTitle","useState","anchorEl","setAnchorEl","institutions","setInstitutions","loading","setLoading","hasSearched","setHasSearched","showDropdown","setShowDropdown","search","setSearch","useEffect","formData","setFormData","institution","academicLevel","gradeSystem","score","backlogs","maxScore","errors","setErrors","length","setPostgraduation","collectedData","console","log","currentValue","localStorage","getItem","currentValueObj","JSON","parse","setItem","stringify","education","postGraduation","totalScore","gradingSystem","setUndergraduation","underGraduation","setIntermediate","plus2","setOthers","handleChange","e","name","value","target","prevData","validateField","error","trim","test","parseFloat","parseInt","prevErrors","isFormValid","Object","values","every","err","val","savedData","open","Boolean","id","undefined","_jsxs","Box","sx","testReadyStyles","container1","display","flexDirection","justifyContent","alignItems","height","textAlign","children","_jsx","Typography","variant","fontWeight","mb","fontSize","xs","lg","includes","_Fragment","style","color","width","sm","gap","position","TextField","fullWidth","label","onChange","async","_data$data","response","fetch","concat","data","json","fetchData","helperText","autoComplete","InputProps","endAdornment","CircularProgress","size","Close","cursor","onClick","prev","borderRadius","borderLeft","top","zIndex","backgroundColor","boxShadow","maxHeight","overflowY","map","option","index","MenuItem","InstitutionName","handleOptionClick","select","gradeScaleOptions","item","type","inputProps","maxLength","pattern","step","Popover","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","p","maxWidth","mt","InputAdornment","IconButton","event","currentTarget","src","Images","info","alt","Button","px","py","handleSave","disabled"],"sourceRoot":""}