{"version":3,"file":"static/js/211.fc9333fc.chunk.js","mappings":"sQAMA,MAAMA,EAAa,IAAIC,IAAAA,MAAO,CAC1BC,QAASC,EACTC,UAAWC,EACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,MA6DtB,EA1CkDC,IAAe,IAAd,KAAEC,GAAMD,EACzD,IAAKC,GAAwB,IAAhBA,EAAKC,OAChB,OAAOC,EAAAA,EAAAA,KAAA,KAAAC,SAAG,2BAIZ,MAAMC,EAAYJ,EAAKK,KAAKC,IAAgB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,MAAM,CAChDC,KAAwB,QAAnBN,EAAAD,EAAKQ,sBAAc,IAAAP,OAAA,EAAnBA,EAAqBQ,YAAY,KAAM,EAC5CC,KAAwB,QAAnBR,EAAAF,EAAKQ,sBAAc,IAAAN,OAAA,EAAnBA,EAAqBO,YAAY,KAAM,EAC5CE,KAAMX,EAAKW,MAAQ,UACnBC,YAAY,GAADC,OAAKb,EAAKW,MAAQ,UAAS,qBAAAE,OAAoBb,EAAKc,iBAAmB,MAAK,oBAAAD,OACrFb,EAAKe,MAAQ,aAAY,gBAAAF,OACZ,CAAc,QAAdV,EAACH,EAAKgB,gBAAQ,IAAAb,OAAA,EAAbA,EAAec,KAAmB,QAAfb,EAAEJ,EAAKgB,gBAAQ,IAAAZ,OAAA,EAAbA,EAAec,MAAoB,QAAfb,EAAEL,EAAKgB,gBAAQ,IAAAX,OAAA,EAAbA,EAAec,SACvEC,OAAOC,SACPC,KAAK,MAAK,iCAAAT,OAAgCb,EAAKuB,gBAAkB,UAAS,+BAAAV,OAC3Eb,EAAKwB,gBAAkB,UAAS,iBAAAX,QACN,QAAZP,EAAAN,EAAKyB,eAAO,IAAAnB,OAAA,EAAZA,EAAcX,SAAU,EAAC,aAE1C,IAID,OACE+B,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CAACC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAAUC,OAHnB,CAAC,QAAS,KAGgCC,KAAM,EAAGC,iBAAiB,EAAKpC,SAAA,EAC7GD,EAAAA,EAAAA,KAACsC,EAAAA,EAAS,CACdC,IAAI,qDACJC,YAAY,0FAGPtC,EAAUC,KAAI,CAACsC,EAAKC,KACnB1C,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CAAaC,SAAU,CAACH,EAAI9B,IAAK8B,EAAI3B,KAAM+B,KAAMzD,EAAqBa,UAC7E6B,EAAAA,EAAAA,MAACgB,EAAAA,EAAK,CAAA7C,SAAA,EACJD,EAAAA,EAAAA,KAAA,UAAAC,SAASwC,EAAI1B,OAAc,KAACf,EAAAA,EAAAA,KAAA,SAC3ByC,EAAIzB,gBAHM0B,OAQF,EC9BnB,EAnC0BK,KACxB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,MAsBlD,OAlBAK,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAMC,QAAiBC,MALb,uDAMV,IAAKD,EAASE,GAAI,MAAM,IAAIC,MAAM,wBAElC,MAAMC,QAAaJ,EAASK,OAC5Bb,EAAgBY,EAClB,CAAE,MAAOR,GACPC,EAASD,EAAMU,QACjB,CAAC,QACCX,GAAW,EACb,GAGFY,EAAW,GACV,KAGDlC,EAAAA,EAAAA,MAAA,OAAA7B,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,yBACHkD,IAAWnD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mBACdoD,IAASvB,EAAAA,EAAAA,MAAA,KAAA7B,SAAA,CAAG,UAAQoD,MACnBF,IAAYE,IAASrD,EAAAA,EAAAA,KAACiE,EAAY,CAACnE,KAAMkD,MACvC,C","sources":["pages/courses/Map.tsx","pages/courses/UniversityMapPage.tsx"],"sourcesContent":["import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from \"leaflet\";\nimport { LatLngExpression } from \"leaflet\";\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\";\nimport markerShadowPng from \"leaflet/dist/images/marker-shadow.png\";\n\nconst customIcon = new L.Icon({\n    iconUrl: markerIconPng,\n    shadowUrl: markerShadowPng,\n    iconSize: [25, 41], // Default size\n    iconAnchor: [12, 41], // Center-bottom anchor\n    popupAnchor: [1, -34], // Popup position adjustment\n  });\n\ninterface University {\n  name: string;\n  establishedYear?: number;\n  type?: string;\n  geoCoordinates?: { coordinates: [number, number] };\n  location?: { city?: string; state?: string; country?: string };\n  acceptanceRate?: number;\n  graduationRate?: number;\n  courses?: string[];\n}\n\n// Define the prop type for the component\ninterface MapComponentProps {\n  list: University[];\n}\n\nconst MapComponent: React.FC<MapComponentProps> = ({ list }) => {\n  if (!list || list.length === 0) {\n    return <p>No locations available</p>;\n  }\n\n  // Convert list items into location objects\n  const locations = list.map((item: University) => ({\n    lat: item.geoCoordinates?.coordinates[1] || 0,\n    lng: item.geoCoordinates?.coordinates[0] || 0,\n    name: item.name || \"Unknown\",\n    description: `${item.name || \"Unknown\"}, established in ${item.establishedYear || \"N/A\"}, is a renowned ${\n      item.type || \"university\"\n    } located in ${[item.location?.city, item.location?.state, item.location?.country]\n      .filter(Boolean)\n      .join(\", \")}. With an acceptance rate of ${item.acceptanceRate || \"unknown\"}% and a graduation rate of ${\n      item.graduationRate || \"unknown\"\n    }%, it offers ${item.courses?.length || 0} courses.`,\n    \n  }));\n\n  const defaultCenter: LatLngExpression = [51.505, -0.09];\n\n  return (\n    <MapContainer style={{ height: \"500px\", width: \"100%\" }} center={defaultCenter} zoom={5} scrollWheelZoom={true}>\n      <TileLayer\n  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n/>\n\n      {locations.map((loc, index) => (\n        <Marker key={index} position={[loc.lat, loc.lng]} icon={customIcon as L.Icon}>\n        <Popup>\n          <strong>{loc.name}</strong> <br />\n          {loc.description}\n        </Popup>\n      </Marker>\n      \n      ))}\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;\n","import React, { useEffect, useState } from \"react\";\nimport MapComponent from \"./Map\"; // Adjust the path if needed\n\nconst UniversityMapPage = () => {\n  const [universities, setUniversities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const API_URL = \"https://campusroot.com/api/v1/public/listings/:name\"; \n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n\n        const data = await response.json();\n        setUniversities(data); \n      } catch (error: any) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>University Locations</h2>\n      {loading && <p>Loading map...</p>}\n      {error && <p>Error: {error}</p>}\n      {!loading && !error && <MapComponent list={universities} />}\n    </div>\n  );\n};\n\nexport default UniversityMapPage;\n"],"names":["customIcon","L","iconUrl","markerIconPng","shadowUrl","markerShadowPng","iconSize","iconAnchor","popupAnchor","_ref","list","length","_jsx","children","locations","map","item","_item$geoCoordinates","_item$geoCoordinates2","_item$location","_item$location2","_item$location3","_item$courses","lat","geoCoordinates","coordinates","lng","name","description","concat","establishedYear","type","location","city","state","country","filter","Boolean","join","acceptanceRate","graduationRate","courses","_jsxs","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","url","attribution","loc","index","Marker","position","icon","Popup","UniversityMapPage","universities","setUniversities","useState","loading","setLoading","error","setError","useEffect","async","response","fetch","ok","Error","data","json","message","fetchData","MapComponent"],"sourceRoot":""}